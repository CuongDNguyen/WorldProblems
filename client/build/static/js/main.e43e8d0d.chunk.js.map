{"version":3,"sources":["react-auth0-spa.js","pages/SignInSide.js","components/Profile.js","components/PrivateRoute.js","utils/API.js","pages/ProblemsPage.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","useStyles","makeStyles","theme","root","height","image","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","paper","margin","spacing","display","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","form","width","marginTop","submit","SignInSide","classes","isAuthenticated","loginWithRedirect","logout","Grid","container","component","className","CssBaseline","item","xs","sm","md","Paper","elevation","square","Avatar","Typography","variant","noValidate","Button","type","fullWidth","color","onClick","to","Profile","loading","user","src","picture","alt","name","email","JSON","stringify","PrivateRoute","Component","path","rest","useEffect","a","appState","targetUrl","fn","render","props","axios","get","timeout","ProblemsPage","state","problems","API","then","response","console","log","setState","catch","err","this","App","exact","Boolean","hostname","match","ReactDOM","children","onRedirectCallback","initOptions","useState","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","getUser","initAuth0","loginWithPopup","params","error","Provider","value","getIdTokenClaims","getTokenSilently","getTokenWithPopup","domain","config","client_id","clientId","redirect_uri","origin","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e43e8d0d.chunk.js","sourcesContent":["// src/react-auth0-spa.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://source.unsplash.com/random)',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignInSide() {\n  const classes = useStyles();\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          \n          <Typography component=\"h1\" variant=\"h5\">\n\n          </Typography>\n          <form className={classes.form} noValidate>\n          <div>\n      {!isAuthenticated && (\n        <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              onClick={() =>\n                loginWithRedirect({})\n              }\n            >\n              Sign In\n            </Button>\n      )}\n\n      {isAuthenticated && <Button onClick={() => logout()}>Log out</Button>}\n      {isAuthenticated && (\n      <span>\n        <Link to=\"/\">Home</Link>&nbsp;\n        <Link to=\"/profile\">Profile</Link>\n      </span>\n    )}\n    </div>\n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}","// src/components/Profile.js\n\nimport React, { Fragment } from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst Profile = () => {\n  const { loading, user } = useAuth0();\n\n  if (loading || !user) {\n    return (\n      <div>Loading...</div>\n    );\n  }\n\n  return (\n    <Fragment>\n      <img src={user.picture} alt=\"Profile\" />\n\n      <h2>{user.name}</h2>\n      <p>{user.email}</p>\n      <code>{JSON.stringify(user, null, 2)}</code>\n    </Fragment>\n  );\n};\n\nexport default Profile;","// src/components/PrivateRoute.js\n\nimport React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\n  const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\n\n  useEffect(() => {\n    if (loading || isAuthenticated) {\n      return;\n    }\n    const fn = async () => {\n      await loginWithRedirect({\n        appState: { targetUrl: path }\n      });\n    };\n    fn();\n  }, [loading, isAuthenticated, loginWithRedirect, path]);\n\n  const render = props => isAuthenticated === true ? <Component {...props} /> : null;\n\n  return <Route path={path} render={render} {...rest} />;\n};\n\nexport default PrivateRoute;","import axios from 'axios';\n\nconst timeout = 5000;\n\nexport default {\n    getAllProblems: () => {\n        const allProblemsUrl = `/api/problems`;\n        return axios.get(allProblemsUrl, {\n            timeout: timeout\n        })\n    },\n\n    createNewProblem: (description, author) => {\n        const createProblemsUrl = `/api/problems`;\n        return axios.post(createProblemsUrl, {\n            author: author,\n            description: description\n        })\n    }\n}","import React, { Component } from 'react';\nimport { useAuth0 } from '../react-auth0-spa';\nimport API from '../utils/API';\n\nexport default class ProblemsPage extends Component {\n\n    state = {\n        problems: []\n    }\n\n    componentDidMount() {\n        API.getAllProblems()\n        .then( (response) => {\n            console.log('response: ', response)\n            this.setState({\n                problems: response\n            }, () => {\n                console.log('problems: ', this.state.problems);\n            })\n        })\n        .catch( (err) => {\n            console.log('errors: ', err)\n        })\n    }\n    \n    render() {\n        const { loading, user } = useAuth0();\n\n        if (loading || !user) {\n          return (\n            <div>Loading...</div>\n          );\n        }\n      \n        return(\n            <div>\n                {\n                    this.state.problems\n                }\n            </div>\n        )\n    }\n}","// src/App.js\n\nimport React from \"react\";\nimport { useAuth0 } from \"./react-auth0-spa\";\nimport SignInSide from \"./pages/SignInSide\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Profile from \"./components/Profile\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport ProblemsPage from \"./pages/ProblemsPage\";\n\nfunction App() {\n  const { loading } = useAuth0();\n\n  if (loading) {\n    return (\n      <div>Loading...</div>\n    );\n  }\n\n  return (\n<div className=\"App\">\n      {/* New - use BrowserRouter to provide access to /profile */}\n      <BrowserRouter>\n        <header>\n          <SignInSide />\n        </header>\n        <Switch>\n          <Route path=\"/\" exact />\n          <PrivateRoute path=\"/profile\" component={Profile} />\n          <PrivateRoute path=\"/problems\" component={ProblemsPage} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// src/index.js\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    onRedirectCallback={onRedirectCallback}\n>\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}