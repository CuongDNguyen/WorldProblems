{"version":3,"sources":["components/Problem.js","utils/API.js","components/PostProblem.js","pages/ProblemsPage.js","components/FunctionalProblem.js","App.js","serviceWorker.js","index.js"],"names":["Problem","props","Grid","container","direction","Paper","component","Typography","this","problemTitle","Component","currentDate","Date","allProblemsUrl","axios","get","timeout","description","author","createProblemsUrl","post","createdAt","updatedAt","PostProblem","handleClick","bind","API","then","catch","Button","size","onClick","ProblemsPage","state","problems","response","console","log","setState","err","useStyles","makeStyles","theme","root","flexGrow","FunctionalProblem","style","className","xs","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QA0BeA,E,YAtBX,WAAYC,GAAQ,qEACVA,I,sEAIN,OACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,UAAU,SAASD,WAAS,GAC9B,kBAACD,EAAA,EAAD,CAAME,UAAU,MAAMD,WAAS,GAC3B,kBAACE,EAAA,EAAD,CAAOC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAYD,UAAU,MACbE,KAAKP,MAAMQ,sB,GAZ1BC,a,iCCClBC,EAAc,IAAIC,KAEP,EACK,WACZ,IAAMC,EAAc,UALb,sBAKa,iBACpB,OAAOC,IAAMC,IAAIF,EAAgB,CAC7BG,QARI,OAID,EAQO,SAACC,EAAaC,GAC5B,IAAMC,EAAiB,UAZhB,sBAYgB,iBACvB,OAAOL,IAAMM,KAAKD,EAAmB,CACjCD,OAAQA,EACRD,YAAaA,EACbI,UAAWV,EACXW,UAAWX,KCKRY,E,YApBX,WAAYtB,GAAQ,IAAD,8BACf,4CAAMA,KAEDuB,YAAc,EAAKA,YAAYC,KAAjB,gBAHJ,E,2EAOfC,IAAuBC,OAAOC,U,+BAI9B,OAEI,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,QAASvB,KAAKgB,kB,GAdrBd,aCCLsB,E,2MAEjBC,MAAQ,CACJC,SAAU,I,mFAGO,IAAD,OAChBR,IACCC,MAAM,SAACQ,GACJC,QAAQC,IAAI,aAAcF,GAC1B,EAAKG,SAAS,CACVJ,SAAUC,IACX,WACCC,QAAQC,IAAI,aAAc,EAAKJ,MAAMC,gBAG5CN,OAAO,SAACW,GACLH,QAAQC,IAAI,WAAYE,Q,+BAM5B,OACI,6BAMI,kBAAC,EAAD,CAAS9B,aAAa,0BACtB,kBAAC,EAAD,CAASA,aAAa,yBACtB,kBAAC,EAAD,W,GAhC0BC,a,QCDpC8B,EAAYC,aAAY,SAAAC,GAAK,MAAK,CACpCC,KAAM,CACFC,SAAU,OAqBHC,MAjBf,WACI,IAAMC,EAAQN,IAEd,OACI,yBAAKO,UAAWD,EAAMH,MAClB,kBAACzC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,OACtB,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAAC6C,GAAI,IAEpB,kBAAC9C,EAAA,EAAD,CAAMC,WAAS,EAAC6C,GAAI,IAEpB,kBAAC9C,EAAA,EAAD,CAAMC,WAAS,EAAC6C,GAAI,OCGrBC,MAhBf,WAEE,OACF,yBAAKF,UAAU,OAET,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,KAAK,IAAIC,OAAK,EAAC7C,UAAWN,IACjC,kBAAC,IAAD,CAAOkD,KAAK,WAAW5C,UAAWN,IAClC,kBAAC,IAAD,CAAOkD,KAAK,YAAY5C,UAAW0B,QCJzBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.3d7bde55.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Paper, Typography } from '@material-ui/core'\n\nclass Problem extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Grid container>\n                <Grid direction=\"column\" container>\n                    <Grid direction=\"row\" container>\n                        <Paper component=\"div\">\n                            <Typography component=\"h3\">\n                                    {this.props.problemTitle}\n                            </Typography>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Grid>\n        )\n    }\n\n}\n\nexport default Problem;","import axios from 'axios';\n\nconst timeout = 5000;\nconst localhost = `http://localhost:80`;\nlet currentDate = new Date();\n\nexport default {\n    getAllProblems: () => {\n        const allProblemsUrl = `${localhost}/api/problems`;\n        return axios.get(allProblemsUrl, {\n            timeout: timeout\n        })\n    },\n\n    createNewProblem: (description, author) => {\n        const createProblemsUrl = `${localhost}/api/problems`;\n        return axios.post(createProblemsUrl, {\n            author: author,\n            description: description,\n            createdAt: currentDate,\n            updatedAt: currentDate\n        })\n    }\n}","import React, { Component } from 'react';\nimport { Button } from '@material-ui/core';\nimport API from '../utils/API';\n\nclass PostProblem extends Component {\n    constructor(props) {\n        super(props)\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        API.createNewProblem().then().catch();\n    }\n\n    render() {\n        return (\n\n            <Button size=\"small\" onClick={this.handleClick}>\n\n            </Button>\n        )\n    }\n}\n\nexport default PostProblem;","import React, { Component } from 'react';\nimport Problem from '../components/Problem';\nimport PostProblem from '../components/PostProblem';\nimport API from '../utils/API';\n\nexport default class ProblemsPage extends Component {\n\n    state = {\n        problems: []\n    }\n\n    componentDidMount() {\n        API.getAllProblems()\n        .then( (response) => {\n            console.log('response: ', response)\n            this.setState({\n                problems: response\n            }, () => {\n                console.log('problems: ', this.state.problems);\n            })\n        })\n        .catch( (err) => {\n            console.log('errors: ', err)\n        })\n    }\n    \n    render() {\n\n        return(\n            <div>\n                {\n            //         this.state.problems.map( (problem) => {\n            //             <Problem problemTitle={problem.text}/>\n            //         })\n                }\n                <Problem problemTitle=\"Building this website\"/>\n                <Problem problemTitle=\"Learning Material UI\"/>\n                <PostProblem />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\n\nconst useStyles = makeStyles( theme => ({\n    root: {\n        flexGrow: 1\n    }\n}))\n\nfunction FunctionalProblem() {\n    const style = useStyles();\n\n    return (\n        <div className={style.root}>\n            <Grid container direction=\"row\">\n                <Grid container xs={4}>\n                </Grid>\n                <Grid container xs={4}>\n                </Grid>\n                <Grid container xs={4}>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default FunctionalProblem;","// src/App.js\n\nimport React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport ProblemsPage from \"./pages/ProblemsPage\";\nimport Problem from \"./components/FunctionalProblem\";\n\nfunction App() {\n\n  return (\n<div className=\"App\">\n      {/* New - use BrowserRouter to provide access to /profile */}\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact component={Problem}/>\n          <Route path=\"/problem\" component={Problem} />\n          <Route path=\"/problems\" component={ProblemsPage} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// src/index.js\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}