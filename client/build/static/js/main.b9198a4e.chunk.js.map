{"version":3,"sources":["components/Problem.js","utils/API.js","components/PostProblem.js","pages/ProblemsPage.js","App.js","serviceWorker.js","index.js"],"names":["Problem","props","Grid","container","direction","Paper","component","Typography","this","problemTitle","Component","currentDate","Date","allProblemsUrl","axios","get","timeout","author","title","description","createProblemsUrl","post","createdAt","updatedAt","PostProblem","handleClick","bind","state","document","querySelector","value","problemDescription","setState","console","log","API","then","res","catch","item","xs","TextField","placeholder","id","Input","fullWidth","Button","size","onClick","ProblemsPage","problems","response","data","err","List","map","problem","key","ListItem","App","className","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iRA0BeA,E,YAtBX,WAAYC,GAAQ,qEACVA,I,sEAIN,OACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,UAAU,SAASD,WAAS,GAC9B,kBAACD,EAAA,EAAD,CAAME,UAAU,MAAMD,WAAS,GAC3B,kBAACE,EAAA,EAAD,CAAOC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAYD,UAAU,MACbE,KAAKP,MAAMQ,sB,GAZ1BC,a,oDCClBC,EAAc,IAAIC,KAEP,EACK,WACZ,IAAMC,EAAc,UALb,wBAKa,iBACpB,OAAOC,IAAMC,IAAIF,EAAgB,CAC7BG,QARI,OAID,EAQO,SAACC,EAAQC,EAAOC,GAC9B,IAAMC,EAAiB,UAZhB,wBAYgB,iBACvB,OAAON,IAAMO,KAAKD,EAAmB,CACjCH,OAAQA,EACRC,MAAOA,EACPC,YAAaA,EACbG,UAAWX,EACXY,UAAWZ,KCyBRa,E,YAzCX,WAAYvB,GAAQ,IAAD,8BACf,4CAAMA,KAEDwB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,MAAQ,CACTT,MAAO,GACPC,YAAa,IANF,E,2EAUJ,IAAD,OACJV,EAAemB,SAASC,cAAc,iBAAiBC,OAAS,oBAChEC,EAAqBH,SAASC,cAAc,uBAAuBC,OAAS,0BAClFtB,KAAKwB,SAAS,CACVd,MAAOT,EACPU,YAAaY,IACd,WACCE,QAAQC,IAAI,UAAW,EAAKP,UAEhCQ,EAAqB,QAAS1B,EAAcsB,GAAoBK,MAAM,SAACC,GACnEJ,QAAQC,IAAI,aAAcG,MAC3BC,U,+BAIH,OACQ,kBAACpC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,UACtB,kBAACF,EAAA,EAAD,CAAMqC,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,CAAWC,YAAY,gBAAgBC,GAAG,kBAE9C,kBAACzC,EAAA,EAAD,CAAMqC,MAAI,EAACC,GAAI,GACf,kBAACI,EAAA,EAAD,CAAOC,WAAS,EAACF,GAAG,uBACpB,kBAACG,EAAA,EAAD,CAAQC,KAAK,QAAQC,QAASxC,KAAKiB,aAAnC,c,GAjCMf,a,kBCELuC,E,2MAEjBtB,MAAQ,CACJuB,SAAU,I,mFAGO,IAAD,OAChBf,IACKC,MAAK,SAACe,GACHlB,QAAQC,IAAI,aAAciB,GAC1B,EAAKnB,SAAS,CACVkB,SAAUC,EAASC,OACpB,WACCnB,QAAQC,IAAI,UAAW,EAAKP,aAGnCW,OAAM,SAACe,GACJpB,QAAQC,IAAI,WAAYmB,Q,+BAMhC,OACI,6BACI,kBAACC,EAAA,EAAD,CAAMhD,UAAU,MAERE,KAAKmB,MAAMuB,SAASK,KAAI,SAACC,EAASC,GAC9B,OACI,kBAACC,EAAA,EAAD,CAAUD,IAAKA,GACX,kBAAC,EAAD,CAAShD,aAAc+C,EAAQtC,aAMnD,kBAAC,EAAD,W,GApC0BR,aCiB3BiD,MAhBf,WAEE,OACF,yBAAKC,UAAU,OAET,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACxD,UAAWN,IACjC,kBAAC,IAAD,CAAO6D,KAAK,WAAWvD,UAAWN,IAClC,kBAAC,IAAD,CAAO6D,KAAK,YAAYvD,UAAW2C,QCJzBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAD,MACFzC,SAAS0C,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.b9198a4e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Paper, Typography } from '@material-ui/core'\n\nclass Problem extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Grid container>\n                <Grid direction=\"column\" container>\n                    <Grid direction=\"row\" container>\n                        <Paper component=\"div\">\n                            <Typography component=\"h3\">\n                                    {this.props.problemTitle}\n                            </Typography>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Grid>\n        )\n    }\n\n}\n\nexport default Problem;","import axios from 'axios';\n\nconst timeout = 5000;\nconst localhost = `http://localhost:8080`;\nlet currentDate = new Date();\n\nexport default {\n    getAllProblems: () => {\n        const allProblemsUrl = `${localhost}/api/problems`;\n        return axios.get(allProblemsUrl, {\n            timeout: timeout\n        })\n    },\n\n    createNewProblem: (author, title, description) => {\n        const createProblemsUrl = `${localhost}/api/problems`;\n        return axios.post(createProblemsUrl, {\n            author: author,\n            title: title,\n            description: description,\n            createdAt: currentDate,\n            updatedAt: currentDate\n        })\n    }\n}","import React, { Component } from 'react';\nimport { Button, TextField, Input, Grid } from '@material-ui/core';\nimport API from '../utils/API';\n\nclass PostProblem extends Component {\n    constructor(props) {\n        super(props)\n\n        this.handleClick = this.handleClick.bind(this);\n        this.state = {\n            title: \"\",\n            description: \"\"\n        }\n    }\n\n    handleClick() {\n        const problemTitle = document.querySelector(\"#problemTitle\").value || \"No title provided\";\n        const problemDescription = document.querySelector(\"#problemDescription\").value || \"No description provided\"\n        this.setState({\n            title: problemTitle,\n            description: problemDescription\n        }, () => {\n            console.log(\"state: \", this.state);\n        })\n        API.createNewProblem(\"Cuong\", problemTitle, problemDescription).then( (res) => {\n            console.log(\"Response: \", res)\n        }).catch();\n    }\n\n    render() {\n        return (\n                <Grid container direction=\"column\">\n                    <Grid item xs={4}>\n                        <TextField placeholder=\"Problem title\" id=\"problemTitle\" />\n                    </Grid>\n                    <Grid item xs={4}>\n                    <Input fullWidth id=\"problemDescription\" />\n                    <Button size=\"small\" onClick={this.handleClick}>\n                        Post\n                    </Button>\n                    </Grid>\n                </Grid>\n        )\n    }\n}\n\nexport default PostProblem;","import React, { Component } from 'react';\nimport Problem from '../components/Problem';\nimport PostProblem from '../components/PostProblem';\nimport { List, ListItem } from '@material-ui/core';\nimport API from '../utils/API';\n\nexport default class ProblemsPage extends Component {\n\n    state = {\n        problems: []\n    }\n\n    componentDidMount() {\n        API.getAllProblems()\n            .then((response) => {\n                console.log('response: ', response)\n                this.setState({\n                    problems: response.data\n                }, () => {\n                    console.log('state: ', this.state);\n                })\n            })\n            .catch((err) => {\n                console.log('errors: ', err)\n            })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <List component=\"ul\">\n                    {\n                        this.state.problems.map((problem, key) => {\n                            return (\n                                <ListItem key={key}>\n                                    <Problem problemTitle={problem.title} />\n                                </ListItem>\n                            )\n                        })\n                    }\n                </List>\n                <PostProblem />\n            </div>\n        );\n    }\n}","// src/App.js\n\nimport React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport ProblemsPage from \"./pages/ProblemsPage\";\nimport Problem from \"./components/Problem\";\n\nfunction App() {\n\n  return (\n<div className=\"App\">\n      {/* New - use BrowserRouter to provide access to /profile */}\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact component={Problem}/>\n          <Route path=\"/problem\" component={Problem} />\n          <Route path=\"/problems\" component={ProblemsPage} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// src/index.js\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}