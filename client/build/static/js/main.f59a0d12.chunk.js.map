{"version":3,"sources":["actions/index.js","actions/action_types.js","components/Problem.js","utils/API.js","components/PostProblem.js","components/ProblemList.js","pages/ProblemsPage.js","App.js","serviceWorker.js","reducers/index.js","middleware/index.js","store/index.js","index.js"],"names":["localhost","ADD_POST","FORBIDDEN_WORDS","POSTS_LOADED","timeout","Date","Problem","this","getProblems","props","getAllProblems","console","log","posts","length","map","postData","data","post","key","id","title","description","Component","connect","state","dispatch","allProblemsUrl","axios","get","then","res","type","payload","currentDate","author","createProblemsUrl","createdAt","updatedAt","PostProblem","handleClick","bind","handleSubmit","problemTitle","document","querySelector","value","problemDescription","setState","API","catch","event","TextField","placeholder","Input","fullWidth","Button","size","onClick","onSubmit","ProblemList","ProblemsPage","App","className","Boolean","window","location","hostname","match","initialState","rootReducer","action","Object","assign","forbiddenWords","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","foundWord","filter","word","includes","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f59a0d12.chunk.js","sourcesContent":["import { POSTS_LOADED } from './action_types';\nimport axios from 'axios';\nconst timeout = 5000;\nlet localhost;\nconst env = process.env.NODE_ENV || \"development\";\nif (env === \"development\") {\n    localhost = `http://localhost:8080`;\n} else {\n    localhost = \"\";\n}\n\nlet currentDate = new Date();\n\n// export function addPost(payload) {\n//     return { type: ADD_POST, payload }\n// }\n\nexport function getAllProblems() {\n    return function (dispatch) {\n        const allProblemsUrl = `${localhost}/api/problems`;\n        return axios.get(allProblemsUrl, {\n            timeout: timeout\n        }).then(res => dispatch({ type: POSTS_LOADED, payload: res }))\n    }\n}\n\nexport function createNewProblem(author, title, description) {\n    const createProblemsUrl = `${localhost}/api/problems`;\n    return axios.post(createProblemsUrl, {\n        author: author,\n        title: title,\n        description: description,\n        createdAt: currentDate,\n        updatedAt: currentDate\n    })\n}","export const ADD_POST = \"ADD_POST\";\nexport const FORBIDDEN_WORDS = \"FORBIDDEN_WORDS\";\nexport const POSTS_LOADED = \"POSTS_LOADED\";","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { getAllProblems } from '../actions/index';\n\nclass Problem extends Component {\n    \n    componentDidMount() {\n        this.getProblems();\n    }\n\n    getProblems() {\n         this.props.getAllProblems();\n         console.log('posts: ', this.props.posts[0])\n    }\n    render() {    \n        return this.props.posts.length ? (\n            <Fragment>\n                <ul>\n                {\n                    this.props.posts.map( postData => ( \n                        postData.data.map(post => {\n                            console.log('real post: ', post)\n                            return (\n                                <li key={post.id}>\n                                    <h3>{post.title}</h3>\n                                    <p>{post.description}</p>\n                                </li>\n                        )\n                        })\n                    ))\n                }\n                </ul>\n            </Fragment>\n        ) : <h1>Loading...</h1>\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        posts: state.posts\n    }\n}\nexport default connect(mapStateToProps, { getAllProblems })(Problem);","import axios from 'axios';\n\nconst timeout = 5000;\nconst localhost = `http://localhost:8080`;\nlet currentDate = new Date();\n\nexport default {\n    getAllProblems: () => {\n        const allProblemsUrl = `${localhost}/api/problems`;\n        return axios.get(allProblemsUrl, {\n            timeout: timeout\n        })\n    },\n\n    createNewProblem: (author, title, description) => {\n        const createProblemsUrl = `${localhost}/api/problems`;\n        return axios.post(createProblemsUrl, {\n            author: author,\n            title: title,\n            description: description,\n            createdAt: currentDate,\n            updatedAt: currentDate\n        })\n    }\n}","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\n// import { addPost } from '../actions/index';\nimport { Button, TextField, Input } from '@material-ui/core';\nimport API from '../utils/API';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        // addPost: post => dispatch(addPost(post))\n    }\n}\n\nclass PostProblem extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            title: \"\",\n            description: \"\"\n        }\n        this.handleClick = this.handleClick.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleClick() {\n        const problemTitle = document.querySelector(\"#problemTitle\").value || \"No title provided\";\n        const problemDescription = document.querySelector(\"#problemDescription\").value || \"No description provided\"\n        this.setState({\n            title: problemTitle,\n            description: problemDescription\n        }, () => {\n            console.log(\"state: \", this.state);\n        })\n        API.createNewProblem(\"Cuong\", problemTitle, problemDescription).then((res) => {\n            console.log(\"Response: \", res)\n        }).catch();\n    }\n\n    handleSubmit(event) {\n        // const title = document.querySelector(\"#title\").value || \"No title provided\";\n        // const description = document.querySelector(\"#description\").value || \"No description provided\";\n        // event.preventDefault();\n        // this.props.addPost({ title: title, description: description });\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <TextField placeholder=\"Problem title\" id=\"problemTitle\" />\n                <Input fullWidth id=\"problemDescription\" />\n                <Button size=\"small\" onClick={this.handleClick}>\n                    Post\n                </Button>\n                <h3>New Redux Form Test</h3>\n                <form onSubmit={this.handleSubmit}>\n                    <div>\n                        <label>Title</label>\n                        <input type=\"text\" id=\"title\" placeholder=\"Post title\"></input>\n                        <label>Description</label>\n                        <input type=\"text\" id=\"description\" placeholder=\"Post description\"></input>\n                    </div>\n                    <button type=\"submit\">Save Post</button>\n                </form>\n            </Fragment>\n        )\n    }\n}\n\nconst ConnectedPostProblem = connect(null, mapDispatchToProps)(PostProblem)\n\nexport default ConnectedPostProblem;","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => {\n    return { posts: state.posts };\n};\n\nconst ConnectedProblemList = ({ posts }) => {\n    console.log(\"connectedProblemList: posts: \", posts)\n    return (\n    <ul>\n        {\n            posts.map(postData => {\n                postData.data.map(post => (\n                    <li key={post.id}>\n                        <h4>{post.title}</h4>\n                        <p>{post.description}</p>\n                    </li>\n                ))\n            })\n        }\n    </ul>\n)}\n\nconst ProblemList = connect(mapStateToProps) (ConnectedProblemList);\n\nexport default ProblemList;","import React, { Component } from 'react';\nimport Problem from '../components/Problem';\nimport PostProblem from '../components/PostProblem';\nimport ProblemList from '../components/ProblemList';\n\nexport default class ProblemsPage extends Component {\n\n    render() {\n\n        return (\n            <div>\n                <Problem />\n                {/* <PostProblem /> */}\n                <ProblemList />\n            </div>\n        );\n    }\n}","// src/App.js\n\nimport React from \"react\";\nimport ProblemsPage from \"./pages/ProblemsPage\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <ProblemsPage />\n      {/* New - use BrowserRouter to provide access to /profile\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact component={Problem}/>\n          <Route path=\"/problem\" component={Problem} />\n          <Route path=\"/problems\" component={ProblemsPage} />\n        </Switch>\n      </BrowserRouter> */}\n\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { POSTS_LOADED } from \"../actions/action_types\";\n\nconst initialState = {\n    posts: []\n}\n\nfunction rootReducer(state = initialState, action) {\n    // if (action.type === ADD_POST) {\n    //     return Object.assign({}, state, {\n    //         posts: state.posts.concat(action.payload)\n    //     })\n    // }\n\n    if (action.type === POSTS_LOADED) {\n        return Object.assign({}, state, {\n            posts: [action.payload]\n        })\n    }\n    return state;\n}\n\nexport default rootReducer;","import { ADD_POST, FORBIDDEN_WORDS } from '../actions/action_types';\n\nconst forbiddenWords = [\"middleware\"];\n\nexport function forbiddenWordsMiddleware({ dispatch }) {\n    return function (next) {\n        return function (action) {\n            if (action.type === ADD_POST) {\n                const foundWord = forbiddenWords.filter(word =>\n                    action.payload.title.includes(word)\n                );\n\n                console.log('Forbidden Word: ', foundWord)\n\n                if (foundWord.length) {\n                    return dispatch({ type: FORBIDDEN_WORDS })\n                }\n            }\n            return next(action);\n        }\n    }\n}","import { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from '../reducers/index';\nimport { forbiddenWordsMiddleware } from \"../middleware/index\";\nimport thunk from 'redux-thunk';\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer,\n    storeEnhancers(applyMiddleware(forbiddenWordsMiddleware, thunk)));\n\nexport default store;","// src/index.js\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from './store/index';\nimport { Provider } from 'react-redux';\n\nwindow.store = store;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}